<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SheepSheep~</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-01-31T16:20:22.799Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Sheep</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1-JS基础</title>
    <link href="http://example.com/2023/01/31/1-JS%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2023/01/31/1-JS%E5%9F%BA%E7%A1%80/</id>
    <published>2023-01-31T13:15:08.000Z</published>
    <updated>2023-01-31T16:20:22.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-1-JS的组成"><a href="#1-1-JS的组成" class="headerlink" title="1.1 JS的组成"></a>1.1 JS的组成</h1><h2 id="1-ECMAScript-JavaScript语法"><a href="#1-ECMAScript-JavaScript语法" class="headerlink" title="1.ECMAScript(JavaScript语法)"></a>1.ECMAScript(JavaScript语法)</h2><h2 id="2-DOM-页面文档对象模型"><a href="#2-DOM-页面文档对象模型" class="headerlink" title="2.DOM(页面文档对象模型)"></a>2.DOM(页面文档对象模型)</h2><h2 id="3-BOM-浏览器对象模型"><a href="#3-BOM-浏览器对象模型" class="headerlink" title="3.BOM(浏览器对象模型)"></a>3.BOM(浏览器对象模型)</h2><h1 id="1-2三种书写位置"><a href="#1-2三种书写位置" class="headerlink" title="1.2三种书写位置"></a>1.2三种书写位置</h1><h2 id="1-内嵌式"><a href="#1-内嵌式" class="headerlink" title="1.内嵌式"></a>1.内嵌式</h2><p>在html文件中使用script双标签</p><h2 id="2-行内式"><a href="#2-行内式" class="headerlink" title="2.行内式"></a>2.行内式</h2><p>直接写到元素的内部</p><h2 id="3-外部js"><a href="#3-外部js" class="headerlink" title="3.外部js"></a>3.外部js</h2><p>在另外的文件中写</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>1.可以将少量或单行js代码写在标签属性中</p><p>2.JS中推荐使用单引号</p><h1 id="1-3JS注释"><a href="#1-3JS注释" class="headerlink" title="1.3JS注释"></a>1.3JS注释</h1><h2 id="1-单行注释"><a href="#1-单行注释" class="headerlink" title="1.单行注释"></a>1.单行注释</h2><p>&#x2F;&#x2F;</p><h2 id="2-多行注释"><a href="#2-多行注释" class="headerlink" title="2.多行注释"></a>2.多行注释</h2><p>&#x2F;**&#x2F;</p><h1 id="1-4输入输出语句"><a href="#1-4输入输出语句" class="headerlink" title="1.4输入输出语句"></a>1.4输入输出语句</h1><p><img src="/1-JS%E5%9F%BA%E7%A1%80/1674464143066.png" alt="1674464143066"></p><h1 id="1-5变量"><a href="#1-5变量" class="headerlink" title="1.5变量"></a>1.5变量</h1><h2 id="1-变量的声明"><a href="#1-变量的声明" class="headerlink" title="1.变量的声明"></a>1.变量的声明</h2><p>​var age;&#x2F;&#x2F;声明一个名为age的变量</p><h2 id="2-变量的赋值"><a href="#2-变量的赋值" class="headerlink" title="2.变量的赋值"></a>2.变量的赋值</h2><p>变量的赋值以最后一次为准。</p><p>​age &#x3D; 10; &#x2F;&#x2F; 给 age 这个变量赋值为 10 </p><p>​var age &#x3D; 18; &#x2F;&#x2F; 声明变量同时赋值为 18     </p><p>​var age &#x3D; 10, name &#x3D; ‘zs’, sex &#x3D; 2;    </p><p>特殊情况：</p><p><img src="/1-JS%E5%9F%BA%E7%A1%80/1674465935336.png" alt="1674465935336"></p><h1 id="1-6数据类型"><a href="#1-6数据类型" class="headerlink" title="1.6数据类型"></a>1.6数据类型</h1><p>​     <strong>JavaScript</strong> 是一种弱类型或者说动态语言。这意味着不用提前声明变量的类型，在程序运行过程中，类型会根据赋值的变量类型被自动确定。  </p><ul><li>简单数据类型 （Number,String,Boolean,Undefined,Null）</li><li>复杂数据类型 （object,Array,Date)</li></ul><h2 id="1-简单数据类型"><a href="#1-简单数据类型" class="headerlink" title="1.简单数据类型"></a>1.简单数据类型</h2><p><img src="/1-JS%E5%9F%BA%E7%A1%80/1674466195329.png" alt="1674466195329"></p><h3 id="1-1数字型Number"><a href="#1-1数字型Number" class="headerlink" title="1.1数字型Number"></a>1.1数字型Number</h3><ul><li><p>JavaScript 数字类型既可以用来保存整数值，也可以保存浮点数。</p></li><li><p>在JS中八进制前面加0，十六进制前面加 0x   。</p></li><li><p>最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</p><p>最小值：Number.MIN_VALUE，这个值为：5e-32</p></li><li><p>三个特殊值</p><p>lInfinity ，代表无穷大，大于任何数值</p><p>l-Infinity ，代表无穷小，小于任何数值</p><p>lNaN ，Not a number，代表一个非数值</p></li><li><p>isNaN()</p><p>用来判断一个变量是否为非数字的类型，返回 true 或者 false。</p><p>示例：<img src="/1-JS%E5%9F%BA%E7%A1%80/1674466820851.png" alt="1674466820851"></p></li></ul><h3 id="1-2字符串型String"><a href="#1-2字符串型String" class="headerlink" title="1.2字符串型String"></a>1.2字符串型String</h3><ul><li><p>字符串型可以是引号中的任意文本，其语法为 双引号 “” 和 单引号’’。推荐使用<strong>单引号</strong>。</p></li><li><p>JS 可以用单引号嵌套双引号 ，或者用双引号嵌套单引号 (<strong>外双内单，外单内双</strong>)也就是里外不能相同。</p></li><li><p>转义符</p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674467031535.png" alt="1674467031535"></p></li><li><p>字符串长度</p></li></ul><p>​     通过字符串的 length 属性可以获取整个字符串的长度。  str.length</p><p>字符串拼接</p><p>​     拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串  </p><p>​     <strong>字符串 + 任何类型 &#x3D; 拼接之后的新字符串</strong>  </p><p>变量不能添加引号！！！</p><h3 id="1-3布尔型Boolean"><a href="#1-3布尔型Boolean" class="headerlink" title="1.3布尔型Boolean"></a>1.3布尔型Boolean</h3><ul><li>布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</li><li>布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</li></ul><h3 id="1-4Undefined和Null"><a href="#1-4Undefined和Null" class="headerlink" title="1.4Undefined和Null"></a>1.4Undefined和Null</h3><ul><li>一个声明后没有被赋值的变量会有一个默认值 undefined ( 如果进行相连或者相加时，注意结果）</li><li>一个声明变量给 null 值，里面存的值为空。</li></ul><h2 id="2-获取变量数据类型"><a href="#2-获取变量数据类型" class="headerlink" title="2.获取变量数据类型"></a>2.获取变量数据类型</h2><p>使用typeof 可用来获取检测变量的数据类型。</p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674469105832.png" alt="1674469105832"></p><h2 id="3-数据类型转换"><a href="#3-数据类型转换" class="headerlink" title="3.数据类型转换"></a>3.数据类型转换</h2><p>使用表单、prompt 获取过来的数据默认是<strong>字符串类型</strong>的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，就是把一种数据类型的变量转换成另外一种数据类型。</p><h3 id="3-1转换为字符串"><a href="#3-1转换为字符串" class="headerlink" title="3.1转换为字符串"></a>3.1转换为字符串</h3><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674469188193.png" alt="1674469188193"></p><h3 id="3-2转换为数字型"><a href="#3-2转换为数字型" class="headerlink" title="3.2转换为数字型"></a>3.2转换为数字型</h3><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674469249538.png" alt="1674469249538"></p><h3 id="3-3转换为布尔型"><a href="#3-3转换为布尔型" class="headerlink" title="3.3转换为布尔型"></a>3.3转换为布尔型</h3><ul><li>代表空、否定的值会被转换为 false ，如 ‘ ‘、0、NaN、null、undefined </li><li>其余值都会被转换为 true</li></ul><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674470279172.png" alt="1674470279172"></p><h1 id="1-7运算符"><a href="#1-7运算符" class="headerlink" title="1.7运算符"></a>1.7运算符</h1><p>运算符（operator）也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号。</p><p>JavaScript中常用的运算符有：</p><p> 算数运算符</p><p> 递增和递减运算符</p><p> 比较运算符</p><p> 逻辑运算符</p><p> 赋值运算符</p><h2 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1.算数运算符"></a>1.算数运算符</h2><p>​+ - * &#x2F; %</p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674470780147.png" alt="1674470780147"></p><p><strong>不能直接判断两个浮点数是否相等。</strong></p><h2 id="2-递增递减运算符"><a href="#2-递增递减运算符" class="headerlink" title="2.递增递减运算符"></a>2.递增递减运算符</h2><p>​++、–</p><h2 id="3-比较运算符"><a href="#3-比较运算符" class="headerlink" title="3.比较运算符"></a>3.比较运算符</h2><p>比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值（true &#x2F; false）作为比较运算的结果。</p><p>​ <img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674470866222.png" alt="1674470866222"></p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674470894546.png" alt="1674470894546"></p><h2 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.逻辑运算符</h2><p>逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断.</p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674470906431.png" alt="1674470906431"></p><p>​     当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值。</p><h2 id="5-赋值运算符"><a href="#5-赋值运算符" class="headerlink" title="5.赋值运算符"></a>5.赋值运算符</h2><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674470972863.png" alt="1674470972863"></p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674470980785.png" alt="1674470980785"></p><h2 id="6-运算符优先级"><a href="#6-运算符优先级" class="headerlink" title="6.运算符优先级"></a>6.运算符优先级</h2><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674470991752.png" alt="1674470991752"></p><h1 id="1-8流程控制-分支"><a href="#1-8流程控制-分支" class="headerlink" title="1.8流程控制-分支"></a>1.8流程控制-分支</h1><h2 id="1-if语句"><a href="#1-if语句" class="headerlink" title="1.if语句"></a>1.if语句</h2><p>if(表达式){&#x2F;&#x2F;成立执行语句</p><p>}</p><p>else if(表达式){&#x2F;&#x2F;成立执行语句</p><p>}</p><p>else{&#x2F;&#x2F;不成立执行的语句</p><p>}</p><h2 id="2-switch语句"><a href="#2-switch语句" class="headerlink" title="2.switch语句"></a>2.switch语句</h2><p>switch( 表达式 ){ </p><p>  case value1:</p><p>​    &#x2F;&#x2F; 表达式 等于 value1 时要执行的代码</p><p>​    break;</p><p>  case value2:</p><p>​    &#x2F;&#x2F; 表达式 等于 value2 时要执行的代码</p><p>​    break;</p><p>  default:</p><p>​    &#x2F;&#x2F; 表达式 不等于任何一个 value 时要执行的代码</p><p>}</p><h2 id="3-三元表达式"><a href="#3-三元表达式" class="headerlink" title="3.三元表达式"></a>3.三元表达式</h2><p>表达式1 ? 表达式2 : 表达式3;</p><p>表达式1成立，执行表达式2，否则执行表达式3</p><h1 id="1-9流程控制-循环"><a href="#1-9流程控制-循环" class="headerlink" title="1.9流程控制-循环"></a>1.9流程控制-循环</h1><h3 id="1-for循环"><a href="#1-for循环" class="headerlink" title="1.for循环"></a>1.for循环</h3><p>for(初始化变量; 条件表达式; 操作表达式 ){</p><p>  &#x2F;&#x2F;循环体</p><p>}</p><h3 id="2-while循环"><a href="#2-while循环" class="headerlink" title="2.while循环"></a>2.while循环</h3><p>while (条件表达式) {</p><p>  &#x2F;&#x2F; 循环体代码 </p><p>}</p><h3 id="3-do-while循环"><a href="#3-do-while循环" class="headerlink" title="3.do while循环"></a>3.do while循环</h3><p>do {</p><p>  &#x2F;&#x2F; 循环体代码 - 条件表达式为 true 时重复执行循环体代码</p><p>} while(条件表达式);</p><h1 id="1-10数组"><a href="#1-10数组" class="headerlink" title="1.10数组"></a>1.10数组</h1><p>&#x2F;&#x2F; 普通变量一次只能存储一个值</p><p>var num &#x3D; 10; </p><p>&#x2F;&#x2F; 数组一次可以存储多个值</p><p>var arr &#x3D; [1,2,3,4,5];</p><p>​<u>数组中可以存放<strong>任意类型</strong>的数据，例如字符串，数字，布尔值等。</u></p><h2 id="1-创建数组"><a href="#1-创建数组" class="headerlink" title="1.创建数组"></a>1.创建数组</h2><ul><li><p>利用new创建数组(先创建，不初始化)</p><p>var 数组名 &#x3D; new Array() ；</p><p>var arr &#x3D; new Array();  &#x2F;&#x2F; 创建一个新的空数组</p></li><li><p>利用数组字面量创建数组(创建时初始化)</p><p>&#x2F;&#x2F;1. 使用数组字面量方式创建空的数组</p><p>var 数组名 &#x3D; []；</p><p>&#x2F;&#x2F;2. 使用数组字面量方式创建带初始值的数组</p><p>var 数组名 &#x3D; [‘小白’,’小黑’,’大黄’,’瑞奇’];</p></li></ul><h2 id="2-数组的索引-下标"><a href="#2-数组的索引-下标" class="headerlink" title="2.数组的索引(下标)"></a>2.数组的索引(下标)</h2><p>&#x2F;&#x2F; 定义数组</p><p>var arrStus &#x3D; [1,2,3];</p><p>&#x2F;&#x2F; 获取数组中的第2个元素</p><p>alert(arrStus[1]);   </p><h2 id="3-数组长度"><a href="#3-数组长度" class="headerlink" title="3.数组长度"></a>3.数组长度</h2><p>使用：数组名.length</p><p>数组长度：数组元素的个数</p><h2 id="4-新增元素"><a href="#4-新增元素" class="headerlink" title="4.新增元素"></a>4.新增元素</h2><ul><li><p>修改length长度</p><p>数组的length属性是可读可写的，通过修改length的值来实现扩容，扩容后是默认值undefined。</p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674473045962.png" alt="1674473045962"></p></li><li><p>修改数组索引</p><p>直接用索引为后面的元素赋值。</p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674473097097.png" alt="1674473097097"></p></li></ul><h1 id="1-11函数"><a href="#1-11函数" class="headerlink" title="1.11函数"></a>1.11函数</h1><h2 id="1-声明"><a href="#1-声明" class="headerlink" title="1.声明"></a>1.声明</h2><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674473218703.png" alt="1674473218703"></p><h2 id="2-调用"><a href="#2-调用" class="headerlink" title="2.调用"></a>2.调用</h2><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674473244618.png" alt="1674473244618"></p><h2 id="3-返回值"><a href="#3-返回值" class="headerlink" title="3.返回值"></a>3.返回值</h2><p>有return，返回对应的值。</p><p>无return，返回undefined。</p><h2 id="4-arguments的使用"><a href="#4-arguments的使用" class="headerlink" title="4.arguments的使用"></a>4.arguments的使用</h2><p>当我们不确定有多少个参数传递的时候，可以用 arguments 来获取。在 JavaScript 中，arguments 实际上它是当前函数的一个内置对象。<strong>所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。</strong></p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674474507584.png" alt="1674474507584"></p><p>使用举例：<img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674474559568.png" alt="1674474559568"></p><h1 id="1-12对象"><a href="#1-12对象" class="headerlink" title="1.12对象"></a>1.12对象</h1><h2 id="1-对象的创建"><a href="#1-对象的创建" class="headerlink" title="1.对象的创建"></a>1.对象的创建</h2><ul><li><p>利用字面量(创建时初始化)</p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674481735087.png" alt="1674481735087"></p></li><li><p>利用new Object(先创建再初始化)</p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674481905635.png" alt="1674481905635"></p></li><li><p>利用构造函数(创建时直接在构造函数中初始化)</p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674481946509.png" alt="1674481946509"></p></li></ul><h2 id="2-对象元素的调用"><a href="#2-对象元素的调用" class="headerlink" title="2.对象元素的调用"></a>2.对象元素的调用</h2><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674481891399.png" alt="1674481891399"></p><h1 id="1-13内置对象"><a href="#1-13内置对象" class="headerlink" title="1.13内置对象"></a>1.13内置对象</h1><p>JavaScript 中的对象分为3种：自定义对象 、<strong>内置对象</strong>、 浏览器对象</p><h2 id="1-math对象"><a href="#1-math对象" class="headerlink" title="1.math对象"></a>1.math对象</h2><p>Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值等）可以使用 Math 中的成员。</p><ul><li>Math.PI  &#x2F;&#x2F; 圆周率</li><li>Math.floor()   &#x2F;&#x2F; 向下取整</li><li>Math.ceil()      &#x2F;&#x2F; 向上取整</li><li>Math.round()      &#x2F;&#x2F; 四舍五入版 就近取整  注意 -3.5  结果是 -3 </li><li>Math.abs()  &#x2F;&#x2F; 绝对值</li><li>Math.max()&#x2F;Math.min()  &#x2F;&#x2F; 求最大和最小值</li></ul><h2 id="2-date对象"><a href="#2-date对象" class="headerlink" title="2.date对象"></a>2.date对象</h2><p>date对象是一个构造函数，所以我们需要实例化后才能使用(需要创建对应的对象)。</p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674550331630.png" alt="1674550331630"></p><ul><li><p>构造函数的参数</p><p>如果括号里面有时间，就返回参数里面的时间。例如日期格式字符串为‘2019-5-1’，可以写成new Date(‘2019-5-1’) 或者 new Date(‘2019&#x2F;5&#x2F;1’)。</p><p>如果Date()不写参数，就返回当前时间。</p></li><li><p>获取时间</p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674550467847.png" alt="1674550467847"></p></li><li><p>获取毫秒数</p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674553259694.png" alt="1674553259694"></p></li></ul><h2 id="3-数组对象"><a href="#3-数组对象" class="headerlink" title="3.数组对象"></a>3.数组对象</h2><h3 id="3-1判断是否为数组对象"><a href="#3-1判断是否为数组对象" class="headerlink" title="3.1判断是否为数组对象"></a>3.1判断是否为数组对象</h3><p>instanceof 运算符，可以判断一个对象是否属于某种类型。</p><p>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法   </p><p>​如：var arr &#x3D; [1, 23];</p><p>​console.log(arr <strong>instanceof</strong> Array); &#x2F;&#x2F; true</p><p>​console.log(<strong>Array.isArray</strong>(arr));  &#x2F;&#x2F; true</p><h3 id="3-2添加删除数组元素的方法"><a href="#3-2添加删除数组元素的方法" class="headerlink" title="3.2添加删除数组元素的方法"></a>3.2添加删除数组元素的方法</h3><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674553514552.png" alt="1674553514552"></p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674553541468.png" alt="1674553541468"></p><h3 id="3-3数组排序"><a href="#3-3数组排序" class="headerlink" title="3.3数组排序"></a>3.3数组排序</h3><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674553559967.png" alt="1674553559967"></p><h3 id="3-4数组索引方法"><a href="#3-4数组索引方法" class="headerlink" title="3.4数组索引方法"></a>3.4数组索引方法</h3><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674553574812.png" alt="1674553574812"></p><h3 id="3-5数组转换为字符串"><a href="#3-5数组转换为字符串" class="headerlink" title="3.5数组转换为字符串"></a>3.5数组转换为字符串</h3><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674553624917.png" alt="1674553624917"></p><h3 id="3-6数组变换"><a href="#3-6数组变换" class="headerlink" title="3.6数组变换"></a>3.6数组变换</h3><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674553656087.png" alt="1674553656087"></p><h2 id="4-字符串对象"><a href="#4-字符串对象" class="headerlink" title="4.字符串对象"></a>4.字符串对象</h2><h3 id="4-1基本包装类型"><a href="#4-1基本包装类型" class="headerlink" title="4.1基本包装类型"></a>4.1基本包装类型</h3><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674554799901.png" alt="1674554799901"></p><p>​     基本数据类型是没有属性和方法的，而对象才有属性和方法 。</p><h3 id="4-2根据字符返回位置"><a href="#4-2根据字符返回位置" class="headerlink" title="4.2根据字符返回位置"></a>4.2根据字符返回位置</h3><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674555073904.png" alt="1674555073904"></p><h3 id="4-3根据位置返回字符"><a href="#4-3根据位置返回字符" class="headerlink" title="4.3根据位置返回字符"></a>4.3根据位置返回字符</h3><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674555104264.png" alt="1674555104264"></p><h3 id="4-4字符串操作方法"><a href="#4-4字符串操作方法" class="headerlink" title="4.4字符串操作方法"></a>4.4字符串操作方法</h3><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674555137012.png" alt="1674555137012"></p><h3 id="4-5repalce-方法"><a href="#4-5repalce-方法" class="headerlink" title="4.5repalce()方法"></a>4.5repalce()方法</h3><p>用于替换字符。</p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674555174310.png" alt="1674555174310"></p><h3 id="4-6split-方法"><a href="#4-6split-方法" class="headerlink" title="4.6split()方法"></a>4.6split()方法</h3><p>用于切分字符串。</p><p><img src="C:\Users\86133\AppData\Roaming\Typora\typora-user-images\1674555214856.png" alt="1674555214856"></p><h3 id="4-7其他方法"><a href="#4-7其他方法" class="headerlink" title="4.7其他方法"></a>4.7其他方法</h3><ul><li>toUpperCase()  &#x2F;&#x2F;转换大写</li><li>toLowerCase()  &#x2F;&#x2F;转换小写</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-1-JS的组成&quot;&gt;&lt;a href=&quot;#1-1-JS的组成&quot; class=&quot;headerlink&quot; title=&quot;1.1 	JS的组成&quot;&gt;&lt;/a&gt;1.1 	JS的组成&lt;/h1&gt;&lt;h2 id=&quot;1-ECMAScript-JavaScript语法&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/01/31/hello-world/"/>
    <id>http://example.com/2023/01/31/hello-world/</id>
    <published>2023-01-31T10:49:36.899Z</published>
    <updated>2023-01-31T10:49:36.899Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
